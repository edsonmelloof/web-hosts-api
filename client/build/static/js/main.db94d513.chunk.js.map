{"version":3,"sources":["pages/InjectHosts/Index.module.css","pages/Menu/Menu.module.css","pages/InjectHosts/index.js","pages/Menu/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","containerhosts","container","App","App-logo","App-logo-spin","box","buttonStyle","App-header","App-link","Menu","state","hosts","callApi","_callee","response","body","regenerator_default","a","wrap","_context","prev","next","fetch","sent","console","log","json","status","Error","message","abrupt","stop","this","res","styleLink","document","createElement","rel","href","head","appendChild","setState","_context2","t0","react_default","className","styles","map","item","key","id","type","name","Component","handleInject","_this","props","history","push","onClick","Routes","react_router_dom","react_router","path","exact","component","Inject","routes","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db94d513.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerhosts\":\"Index_containerhosts__528vL\",\"container\":\"Index_container__1dfw-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Menu_App__-Zotm\",\"App-logo\":\"Menu_App-logo__2Vqdw\",\"App-logo-spin\":\"Menu_App-logo-spin__1pj6K\",\"container\":\"Menu_container__3bWM2\",\"box\":\"Menu_box__Uf5F-\",\"buttonStyle\":\"Menu_buttonStyle__2Db72\",\"App-header\":\"Menu_App-header__dUnZO\",\"App-link\":\"Menu_App-link__-RmNL\"};","import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport styles from \"./Index.module.css\";\n\nexport default class Menu extends Component {\n\n  state = { hosts:[] };\n   \n    async componentDidMount() {    \n     \n        try {\n          const res = await this.callApi();\n    \n          if (res) {\n            const styleLink = document.createElement(\"link\");\n            styleLink.rel = \"stylesheet\";\n            styleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\n            document.head.appendChild(styleLink);\n            this.setState({hosts: res});                     \n            console.log(this.state);\n          }\n        } catch (e) {\n          console.log(e);\n        }\n      }\n  \n      callApi = async () => {\n        const response = await fetch('/hosts/all');\n        console.log(response);\n        const body = await response.json();\n        if (response.status !== 200) throw Error(body.message);\n    \n        return body;\n      };\n\n  render() {\n   \n   return (\n      <div className={styles.container}> \n        <div className=\"row\">       \n         {this.state.hosts.map((item, key) =>            \n            \n            <div className=\"col-sm\"> \n               <div className=\"ui fitted slider checkbox\">\n                  <input id={\"radio\"+key} type=\"checkbox\"/>\n                  <label></label>\n               </div>\n               <label>&nbsp;&nbsp;{item.name}</label>         \n            </div> \n\n          )}\n         </div>\n      </div>\n    );\n  }\n}\n\n","import React, {Component} from 'react';\nimport \"./Menu.module.css\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nclass App extends Component {\n\n  handleInject = () => {     \n    this.props.history.push(`/inject`);\n  }\n\n  render() {\n    return (\n        <div className=\"container\">\n            <div className=\"box\">\n                <div className=\"row\">\n                    <div className=\"col-6\">\n                        <button className=\"btn btn-primary buttonStyle\">\n                            <i className=\"fa fa-plus\"/>&nbsp;\n                            <i className=\"fa fa-edit\"/>&nbsp;\n                            <i className=\"fa fa-trash\"/>\n                            &nbsp;Manage Hosts\n                        </button>\n                    </div>\n                    <div className=\"col-6\">\n                        <link rel=\"stylesheet\" type=\"text/css\" href=\"\"></link>\n                        <button onClick={this.handleInject} className=\"btn btn-success buttonStyle\"><i className=\"fa fa-file\"/>&nbsp;Inject Hosts</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport Inject from './pages/InjectHosts'\nimport Menu from './pages/Menu'\n\n\nconst Routes = () => (\n    <BrowserRouter>\n        <Switch>\n            <Route path=\"/\" exact component={Menu} />\n            <Route path=\"/inject\" exact component={Inject} />            \n            <Route path=\"*\" component={() => <h1>Page not found</h1>} />\n        </Switch>\n    </BrowserRouter>\n);\n\nexport default Routes;","import React from 'react';\nimport './App.css';\n\nimport Routes from './routes'\n\nconst App = () => <Routes />;\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}